%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: forzac.dvi
%%CreationDate: Wed May 25 14:58:52 2016
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR12 CMSY10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Ppdf -t letter -D 1000 forzac -o
%DVIPSParameters: dpi=1000
%DVIPSSource:  TeX output 2016.05.25:1458
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 2 /multiply put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D49063DBCB864620B95E609490BC8DF6000D7A5
719547C13EFEC5D493B96258219E24A8610B0ADB1C0A18A77C585E5A02ED28AA
ECA169B603EEFE1A3C6836BEEA24E3F0BCDFE6FA3453644EF95188093CD7E3B6
21AC046B26FCF95B35F367BA5A58349EECA87699F74AC66159628EB276D51557
249C7E03AB60CE064F592E23FF24C30EE4648FF6179287048EA059729C15897F
4BF1DA211BF432859F0AF4B59C16FD2A09093C887E8C3DE5943475C2C975E347
7362D2537884A78C5F4B5CA5BD5D4CB8008AB6FF586DB951CBDC319ED4B1390F
C46DE8986E5BC18BCF36F900BCA97E4D503C6B481B4C3EC751D4F9F32F04ED79
4990D5AC273E238F3BCDAF71322C0E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 55 /seven put
dup 58 /colon put
dup 66 /B put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 76 /L put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 84 /T put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 124 /emdash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD50D9C98DD94332DB4C7155F8A52013F9ECB7CCE3CFB3E667C57B022A0A753
A45E41A9D8229D5198031ABA3DAAC142AEA5FAB6694A6433629E15AE45A67FDA
34DE10D995ABCAF45FBB3B6B73E80D05F4C51F8C29D4B0F67C8A86432A6C5E86
F0126AB25A5CA2875B48C61CB8112A4CF9AA08F8B0157396CF63CBECDB8867CC
AC10F060630C9BFBAD84B1FF01C814878F0C177F552BDC9BB181B14581C6E968
DAAAB2896FCFB745795C4D2C87CC14FE0D165EF1C2A06A9B89855A1E543F3691
B90E4EE9F324FFCE2D59A8810987DCF0CC270D5E734D22592A1B77DB98075341
C48676342C1C74660E7D79B7329A7F6AB723AEED60BF2E1158F0591CC962E5A6
ACDD131797F623F38B06F9E9EBCBCB1FE26371AC95C993BF2A625BDF1D49FAB3
AFF04E871B6F2BF4F0127C5A92A54E9D2307AFBAEF86AA35B1AAD6E5330470DA
6A84A8C260EF31ECBCD67CAB9BA3B37D12C31E41D1E495C18DD72C72032FFAB1
0E6CB87D48D29CDAA7CBDDE716C4F2DA7AAB9EEE6EEEAD083153A99F90EDDD8C
3FC2A00E05F056385D1A7546F745C381B384C6EC4E03034D51A51808ABC3D114
E7F327220D25CF1E6B4E572F08EA1A13C14AD12F25C8C0FEC40FD751C5C38DCF
29FC9E0F60F11F02AAD0F101884B41AF137F939105103448C267DD76B720B07F
9EC649FA0D5CE9896F9DEBF3276BD1C7B52AF3F5CCD252C83E4F9705B9BA1579
6A1F12BE42B3E36CBC37112146D55FED29C8D6B8CA7697300061092DB8C5BFD3
9E30306FBC1C830D2539A68E73D112859C7FB737B47D4F525ECFF7D2290FD653
D51E3061818A14AC6DF12DB3B838E2DC61EA077FC820A74E29E7403293CDDD0D
D197DDE92C05AFBF4A08FAA0E813E8AB728F485F3D63D611B0F1A37C879C5A09
B3468533633DF48D0D491CDCB7E03BA4F6F2EDF3C8D421F534BAA7CABE32B36F
A07BFC315D2608FB98553EED53FB2B17910492B913782D2445A577CF2F1E2600
0F22117410867DB62CD951CBC33BC500DC8221A6129CAC4710AB8A78AB23756F
ECED585F52C3F2CEF3E1DEAE95F10B91A20221362BAD0B93B2E5BB2497BD9B8C
C6351643C203B9030A1E47DB5C86C09CD36B9D2B3E768896583578D5C3C5D5B1
BAABA3B90DD0F112B9500828F3975539BF682D55FC3B12F45CD74A45E0049297
6764CB12466CC4DB07D02EB47EEB442A5EA3172B9372091805600A7319EEAE0F
C4E778C6F50348D23E88322997984B31301929E401360B402E3D8B9BC4104C70
039FDE5253D728ABAB4C97EB8B4FE9C4EDBE20F52FECDA54012EDC55E5FE9D81
BAFB0F0EC723377FA0D1E72B6313B41A3451CAC21D8A2E80974601D43F3C809B
BAB6353102A24E35FCC13B63F40D5949793298D14C313D44DC04A9F0945FCF50
0337126B95E39E0BC87322CEDCC488D9462B28F562F3EED5AF8CF22EF9A2AC09
5E63958BCEE937DBEBE250F6352EA277673EE476F3D6657158B19692398187B4
33279B761954FABC3E34F59C16290A25A84E2E7E0ACA22B640D87E79D28696E2
35CDA13DB1E4F11503DA5B7F8D8175A4332204CBD2CF441E1A53572290B57892
62D0877E792D2784FED0A4914C7056C0DA23EF19710436C25B8732E5F12FE0F3
57DE11C4FA861636410076A344D9FACDCD8F7615719335DAAD506CD824D11718
1816E17E3D88DA2DB0CCB3A7FBA49B1380242647AF8FFBA087C38A935BA7B7EC
EEE59329268BFD532B0C653E23C368A236A61411096C2FBBD0273C53F08C11B8
C2EC30DD26772AC245C41D411770AA8BC2E575DDE612A7BA803D65D73894E65F
3C8CAD8825177744886C570272CE6BF1D244A43042E310E2D3095AFEB31419E4
2EC49554063D9D04DA265DD8A42C20AF95CF8357F05987EC514639951BBCD8E5
634D726AA74D728AFF950B5476050963FD21AD40778FDDECE269378374A41408
9AD78980D7ECA04F6C3E14BAA2F1DAB24D8508BF3106940870ACF6260165F638
BE1AEF1160A4E6C64C32C3B33BC20890C2785A0E68492B5797ED845074D1F058
DF62F3289CF4BFB50DBBB969369B9231CA81454778D3201E45DE4FC5670887C6
1A481E1408DA0B7C4A5848C3835239FF5FA57A4F854377054E53854E8C00FC9A
8405965D8E172BB458EC0BC7F932DA57E0D8E470DAF1B1DDD865D46E845E3562
D7A3B0B344AB1F68252725EC2B8F5E4D836F97F465388950C25984549AA21046
B3401CF18D8EF0ED3EF64A07702A69E1F09D2BB9E0CF6080CF996BF786902FB7
D3AD6518F18C1FD94CBD19A25E609C94449470B7D1AB49E919FB218219B06B15
50D36E0289E086270F483C0A26C4D4B1F749EE40609EEA355B0192CC9DF4C431
8C27F7142162A1F616C5262F3417ACBD671A6F801CD63E88B98B3D70548628E4
C66CCEF018312D20182633C4284235445523A36B4C4D7B73830248FB7D293C75
FD0378D09FD9CBE61EFDBC67B47E4F49F32043AC8B42B1AC41CCAE198C97E5D0
FDF0750936DB700E3AE801D87F0BB5A60E92DD5C8C7439D4C7A2A99C7F35CC0C
5DDF0617DE3DBB73CFD2C9F791D5ACD2A8D90E081DEAE8AB7A8D5694E0713043
48382480A14154FE57E847406F8F5DEDA86756311FC17A17E297A0522752BE89
AFE32281E971ECD053BCBE1C7643449335EA39A96AFEC770F861115850F76433
4C0FC13D9A8647C285D6A4E3261FD7227D5AC6259ADD553220DA38C57D1F2118
2F516976A36B606412A974D8FB2A1591B85D59AEC48E41C60022126D1C934EEE
DBEE973F80992296A92CB7ABD635D32A01ED3D1DC0B739AEF8D7B5C438C84580
DB2305FF8DF143D8B2B513A069C7214586D7F54A78A02150107CAB278D8550A4
884E0C9991EEF2556822EA5CE7340AC9486581D188192303172A71A741C3225A
48672BD903C27D7EC081F3E90607C4A703B20FF4D0B29FE6C623EB157762E749
094A554CB5D436F16ACADB42C852304E459D1846F066CB29801173C643B62D2D
617853ACB9C52DA52ABDD56E6197DFACF916F61F6E3FC7FDB7B6BD29E7E59C65
B24CA4A8FEC47632617ED3FAF122CE8D3E0486B4B91100B29BD2E58FF466A511
36C2BF1E367A13ED8D54B1978994A107EF2EDBDE31A82ED12364EE48862DE6E0
8FACA8EC492C01CB67755BA4969B16C482BAE761D482693712E2C87499FB3D52
2D7DDE76E26C2707BF4BD90AB8107FA3C8FD4359543BEF280DE4EFA707FBA8BB
340835FE222D4F051E125D6E9F1CF6EFE3FAED04E03FDF11AA9255AA1F7884E0
691DDD1097C6608AA1AC991A23EB7CE94EB875156F4D6EEA8453C6AD61D3C3C9
258D5D42ACE7C6A9D8DC3BA4F0BE258431913DF2C8FFC7A20F7BEDE8EB548B2F
23057161386537203B71EDCAD8B8925F20DF5802A545AA22F1BEB9EF664BA5F4
BE4827884D2BA2970935161A714F070388ED4FA2F38938D8D23AB175A28CD2F0
B558EE56C3DC566132B96047B3F2DD03FEE7A7C4CA6262553577E4B035B20BA5
01E487CFD8BB819878DA04C85C147F52D7C45251836213D8F6A1BF89BBCDD04D
2A7B82B48F98A8E3B524BC63B6AF74FD7FF76E8207CB37A1CC428E67092461AC
CCBD9059717E45556E2243713B64758C8228B5C3099075CE1BA9ADD7931B599C
278A90A1263B7F71DC1509CFC2C3BFEA7EB15729CB36F2332B104AD410A9DE6E
8E8507BD36D10FE0B420D81E92C04BAAD68D0F30E754E4D38415DECE1BC575C4
25D151380DF77D8CEA4549058DCA721805AD40F49751C55DDF02643D11825D9A
81622EE9F2150363B040D3A7E58BD015F8C4DD440D884D0AF596BDC1BC908EBA
63D8A056EB6C7FF03D39337B22ED71228075FE992EADB1BD809B6F5CEDF333E0
13D48C631777FA90A60A86C93543C9F301073A7D2E26545B429922C3BDA028C4
AE62B68F461E2FD27135900024B679D260D7FA1F067C355F6CF4DACFE0808407
6986EE6BB42065C55CEB49CB2A0640882413E532A1D227C0CE07FEFCB9BBE414
05CE67A1E9C04C76068B04F92A875D39F366FD5C192FF1061D3AF548C7D81815
E0260D9FFEB3AA827ADACC831D20EB7EDB8D21F7154BB98F9565166FDAD6DD67
1DEFE13BED53F8D40D2ED9781FEFFFB7C081B31BA2AEFC4892465AD0F164BE3F
C9ABF135D106C81A60F3E644BDCAE54965B43F1783FDEB071AD11BA1CBB65560
974A2BD307D38D9445EE54B3C86ABFF167E38B47F5489BF272816963FD50F7C3
3ABC57848CCB165FC297BE3DCF20DDEFDC6133C3B2E7A01277AE82AD0631EFAF
6A25B3AFCB64280C7FE3D90D416BBF6A86D2E90AEF027BE453676A3360D1D931
0BB9E34A7CC1CEEEA9C9F7C3BB52512DCC1FF917541DF326B50742FCFD564480
650390A0C9CF1E13756C7381F56D7CD5E630D132DF0C6B24BB5B1E2B6C15D107
673868C76AD70901411B43886A69F0E96826D24D2EDFF973EA1922995ABB1DEF
60881A13959A511B9CFA9514C4AFA5D8AA7C82E144DF19797B2A3AAC758929CB
2381647DDBFE32C6044248942549371D67F4C773388416041CCA3F660B7B236C
F2B88CD2344D73E39B732570FB8E1DA8D950004AC1728C34FEF57366D1BE2A54
5158C539337EDC6C1AB79AA2AB288ABE0065BF240991C3302B9C2AF34CBE04C1
A12601588781C72596211BDDEEB0456EC7776F3BBD8623B52AF55517464372CC
300D78D376B6551AFB18FB508384C902A1A1B6D0D7321A64E6C17C392165F9BB
C0AFE864861F6101C28B72DA7A8A925D1A54D2DFE529CCC20A13E0B393883905
9ABF99DD2C8E285300B0F09FAC318DE1D552C97FEF0AE0BCF8B67C09AA64DCF8
EEAC4B1C23D28E2F714667E5B0E347654F67CD6A99E89897126213CBA28A185C
291E120B59D7B067B25AB213E029AF27E3E32573D18B9FA67D53819AFAE39611
EA03466F4AC8A6B780AED0D50F48EC7EAB72F26B7DC73C41334B7C2FFA658BB2
1E8F09D6AC6C7A181C50E6CF8D763AAE3829B4AFAB73C26BF761BE13DFE9D645
12397CEB072764325D8F9E49FC1E372760115ECE33A55341F217C6E88FD9A8B7
A916FD37EB1E319A102FD3C9D52CDCD3F4324C4962D69058D460BD748170A13F
CDC58BB811CE49F8A4A13E951AE38D262865AB1AA0F639CE3FD626CC47D247CC
C4CC59E81A147DE04C7C513AFA76716EF14D4A232088CC513658DC6E31F656B3
394EABDC6EC04ADF9ABC47007B3D8B03C7306603E1796D6C35F1F9B704DA71D5
2D2A096705CB0BE04335E80905348DB13C7674B7AD96CC6DA1FE3D332019E7EA
F3F8FBF6F5003BAE3F29BAA8B2B005EEFA16A0C9D81A7693A7EE672A09C344BA
D4B318F8FC35B8C2FA898566C5456D8B68094B4A1E09D4671353EA49A6777CD9
1BF6A879B8EEFC74BF7B8CB424D8D1149169295CDE192DC2E1703616687EA124
E8B2FB0088639DBB45C544ABA89409FA44EF2C65785FBA614B3D19C522A40D74
2830FCD05FFBC72A61D4DBFFC08F546868C40CC56939E5D0CCA7D11644BFEF93
D48B1F6BE923F2516DDEFDFE83AF2CF9414E0B3A1A6C53FC6B3466201386D487
0C4A78C9498F6D702DFC95EB9CA3A9E6D7965B9BCBB82350D4BD8BE1AF8B4D1C
64877D20C73FE52FAF9416F21477E87194FB703B9515E2B13094A90B7E3088C0
B184822F86AF4EFE44322D828CF0CE2BDF2823CA14490E32FBA5E1E056B8C44B
A17E3644D13FCE3C9B8803F661F3EDA8958959B1B85064B5943E8204EF106C53
2E2387A45C7F0D0218B5C7484B79D86CC3AA85F954BB8256763B349B82BD0EFB
82FAEC99F3A0DD4AA95B9BF9384F653C79EA646011A56D38077539D489BD9C9C
E926B83728079A2082887317B144360E98204840B881D734BDB3DAF99803B36A
7B756718153A6160BFF5321F92EA220A1EE344E1A9F59CCF05FF82FCB014E1DD
6BAFC460B1045D5C3F8E8F78480DBE2114C612A4128575E38EDE701E5861FD2F
982D9E0AE4F3588E98E95242954EA602508EF168BB5E7F68D4C6AB06B7686D4A
CE0DC41A5209DDF20B9D9A9799CB7EBA00A3B2F4376AD85AE572ED50DA543C9E
B3C76C89D0240FEE988145CE44C52EE37D930B2965FC9B1C8BCA84FCEEF5E56C
2450E1B0633C3CF7F6211717EE6EEECC898C0878D8398A365B39EEF478C7072A
CFCADB91C6EC96A3DFA330651DEF3925A08755769EC2C44150D8E91EC98793D6
922F1E9E5ECD11216DB5198A1D28D05737BB4A1311175CEFA0E92DEC18370D30
B13FF19DB8DBE9C10F0252D4BDF24153B5781BD8E2755CC4EA192BD67A68A825
7AA2BC7F3ABEE090E4DC46D1AAECDE652E6EB79AA681F81E545FE28BBB5A3E3C
33ADA7C57C6133C02EA69212DC25185A5173328369887F880573AE74DB898D5D
F5E91368DE01162231393413B203D120DCD1405C019222B91AA6C8194ADBB242
24AB25D3A8A05C95C8ACF94E1C0E3208E20075BC8A5C780BBE0C5D95DAD82F5F
48847C76F014FD1AC508B99A1162BEF0615D7AC52C9370414EEB7CFCF377501D
DA2A53EEC7AD67E4D6657777E715BCDF82751F4FB6BB3C43EA60FD2BD9B25E4B
9C16F1DD3E3FC54108C87D566FFE313A7AA7714CB4E208D9D2F1DBCE8FEB3841
7F0952D96388E6672249F869649D1879565C313A4452DF43F950FC2DEBF4A2D9
CCB4A10B8A04699DBCE63988B560A9F36757984DCEDF2120559755941884D3B9
FFAB661C3D3E4CFD3FAEBCFE0136DE85D3F1C0A6AF0EE053CC83985D995F9742
AD5FF63E285541454705396CDC52D2A078AEE1DC6728C4DC937613BF1DAB69CD
D95914448551E5D6C3B70D9AF7F389F79A7102A884CECD1175667D32835E28FE
1712C313552D752AF6FA92A84EDDDE000C0B40BCD2045CF7331D75F46EFB274A
F9A3841BDF9335774B7C4C0980F8E6D9DB8EFFD981F8169DC5D2F8DD2C1FC573
AAB4E404857814F3A8205D42384FF8F9F2C657A83C68EE5D02B549F523D4ECB2
96F60199209FFE23E1974F44EDBE6F43EC8B93292C67B3BB384782CBB95D329C
0FD0DCB5710BD51989D0E55CB959AC19AC4C0813BD5A01157E3894D7D249E788
D497BE359C2D26C31D0C50127DAF368F3572C613CCC6B7E483B3DB288B0650AD
50A9AD016ACD81677B54052BB03317AE1E71AA1A0B143D376A85026AB6014A4B
61FDA1E94D9BF9E425E296F15CD6E3818DECB035EEFE7AA2E401DF0548C3B1D9
C6EBB87514BD4249CD2E519A2C210A4443A7D0CBD69980959161A9790B7BA760
6326881C5ACCC8FF23A91E9BCE5184EED7CC5A19463440E2C1A8C8458701576F
CBBED97CF585A1F748B33D4C3F24E033C81EBF498496E00146D19B651FC2B73F
1D5968FE8C552EC91ADB0F4E41EB61CEC15284CFC33F3CC101C48616753902E7
46DC9A948A92EED96CF203F327ED77CC1067E30C9AC355EB75249443AA0FEAC5
99B71C21E5F902C3F3CB603D0765ED804CDC982D04B9E79CC40B3CCDBE8D0EA0
09F8C963E5F24FBC7543223F924E3DF08F37BC1B5E8D3BB4897595E1A32200D9
1CE750A3EDA33A856D1E78FE7C121CAEEF42F3F8E989231EA48305729BE49A60
E29EB1684FD18F107D3CBFFA83EF73A0413A501D4C7B115E6799FDAF56C4E2D3
4378A2DF0E42633B9807D92F25A968BBFE2BC98D1869B11A8CB78FEE80D834C0
3AC7FE46978A8C76670C5EC6A705624EE4F7DFCBEA9150C9B45A569A8DEC35A2
F6552252EFFAA15A721228BB4F3D2421FB475210CC1425B0B2D269B500F911A3
DB7561B420129BB38A56478F1EA8EE1197317EEEF6A36FAC28C5A1003D5B0C89
1A5FAA601F9C10D54032FF7E8FE32470218489AC7A388C7FE6B42F98AF92C89E
36B9AB41C20391FD6775D2C2B52DDB35B2785EA6675DD464B64E2F75FD537A95
443F3A43B5D175AA48E80FA8042D224D001DFA903705BF22F42ED683829472C9
4A7BF8674F39D1DA997972E149D317CF787449D3D0F89430900A08A3DA81EA18
C18A98E95E65ACA6EA1E34B8938673AACF5B087354ED7BCB60E8F366FFC307D6
7A54698EC2D2A53DD428882B6E6877ADC7D4A329EAB57AA87F3BA76E7FA68E73
D5597EA9BD7B0600C9DC1ACC87BE6859707DCAB0FE8EE6295899DB16B53952C7
17F8D1E5C541BE5FC59309404C2454607EE82F6026E68F9F15CBA449805C05D5
7356945139F927F00D0BC6959BC41AFF7700001FC8942658C162395D0420F0BE
9D9E002CCDD027972C75E95224A6AD32B862602BCBD2DCA2B5A0C5C122412611
3B78E333E4D132D0531490319AB52727B5B58ECAA0E1901128F4F85CE694CA8E
241259D8093B82A8F64808BFF02C36A45A045237C0D9DA1F58630FBD239249B3
FAE8AE6D1F4E002D056C3CE1D1632B3C1E8F0F2A9412A6BE8F9F27AEBC9A1880
FB2D45B340E98FA6052950B82F587818594BDA61C721C0F117808B9EAB94C4E4
CB0C9490636B23E77431A8C5F71DFB19C80CDFE499E24BBBD527A8FA9792FD2C
B6104533B3FE0623D48C1F17D0DF61BAF06E097DDBF345EBF2813766FCF12A76
0B0E2614367D0339C93310EBC82DFBC1FC59609402CF889147A564DB986068B1
7E010C6A26490520F23A3312F9E9E4DC8D97F86B1155AD1F4439BD799E31D3CD
BED75B4775E11248638CDA4867796667B71C66BEA86DEEC7104C6F36AF5D36A7
72A6412A1C3E6B5C1983F61CDE00EFF7FAB02607BDCC64A4006D61D640D1FFB8
EC8B8B90CBF5A2083CE3CAFA5A5EF4F46D0F05A7638556B7BF79B35A57E6AE26
A7F2CE4D98661A2EB83FB4455F16B6ABBF97559EECDF242963B450D7861A6294
75F17D0E309F75113D08F764E9F56AFD195F691214017B3099B32E3D88673F9A
A0461CDC1FB0325FC1EF9DF156FBBFF04F5220462514027A1FF311CA857878C8
C6845B4D05B18F0F1FB403A7FE36CD808FE3912718EDCB6B9D53E2FEAD0ACEB9
37D7ECB9D09FC6B725FE57CBC3066ABC02AD18251C9384549B99CBF639FCD41B
A1B4F50F1D8890FDB8C5FBA9C0E4AFE5564B6E4444D7CFBBC6F2428B30D84A3B
30DDBA9AE5707DD68FC2A202659AD22605DE976687E9329801E1D5F842ED3324
BE0748F1B399944E05BB12371FC717767C7F5AF6D08422AC1626E86DEA77E6DF
96805B9E313AC1F2DB342690D8778692FDC510840CD40A4E159C5DFAB6963029
1E03673CB399815131153E0F24D110D181BB9F0544F12459701C6A76C8ECE7C3
A13702DA63BC8B745713A2C11FD7B0DA4EB1C161D8D131395AD361F92BDE6317
911107832C8992FACC38E0CD158B96E0DE7A7641C5C383AC6DB9A1DB46B33FE4
D347B112E38A9FE90DFC2E987D54684C55FB8AD445322A9FB8F12A3449E97D85
C8B8C0D3AD600F0F32D6935359949874CE2A7FBFAF686E3AD8C92CAE70F91559
AC81DC1AD91462985E8753D5110F94CF0791E0A0A7ECE07628F09437BF8B731B
7EC65C478E602933F5D4622F8C4ACC128952C1C857B894E89894B399DF371B9D
E69480F3B3C89874DAA9787484ADE8D61D33889795AACC73BC96376C179108E4
FDCDFE2B93A16BA363B1AFAE0E7179293DE8490392CB65A3A56C8ED3362F4A8D
A1253C1154CE76AC14D3E0A8C783757CDC3F750A55BB2CB1B1A86636B42A802F
503F609CB0F86E4B61461283054C4F6B3DD81A84E66828CD366D344DC44B5C6E
474E1677525FB47793498220E2C02EAB61CB7F08B8244FB471EF57940D05F654
6E07AE54CE563C7C667D02A4830989EE32DC9DF57262F52EB41E726DF7615A42
F31E21BE07251E0973567D83D6D906CAC0E9EC99B858D4513F7CB2835B67961E
D16DEAA304D21785989F3CADE0E96DB4F4C7F6AC0001E0480AAD21FC7E2688C3
C3EB32FF3E9DF83C952D003998561333170DAE3131D8D42A3547EDD4C4ADFBDB
1CE254479984B3D75B7EF1DD01439720483F99950EC2D549A9C7B2451EB0DB0D
86B26A1C82C1A36E785E6741C25973F9646D02283F6BBF3BD665B99CA305CF95
227ED13CBE48321E0E06FF814B496882DC6CA0DC85AA695D0C8E98FCC863AE67
07842337CD1F9695D7E83388F337CE6750FFB63E01915BEC27632863174D91F4
4566CAA6A18F4A4B6CE652A872CA8346B7ADD6B41953ABE0697CCE39110F931A
8A7F4CAF69A5930C35AAF3AE9084C7F5905EFF8B6CE4D2BEAEF9D4F647C6C178
89E89D9D63FE335EFEAE084EEBB74C94174E58E42D245B7249BF5C206DCD2481
20C90B70CF1401E794E4CF0D878EF39BFFC4EB3B45B0C3674D7B3A4631D8DA95
D4DBC9E932F14E76216E2F62C3159BD99589C29CDE5AC8014CDED02A2E40A079
6998187587D006F94B2E3B460E03FFDEA8BBB365981EF171BB34E13805F41E1E
F7105FCFFEF4AE5984C084D247D2D366594FA6D79939EFF385F91DF04744AF89
77217617044AE6C40904548E60B5B5FE4F9E338D1D5EB7E3451DBA33D54A1256
F983A02E7CFB64B5582B69F3C053A70BC1FECC643449868D6B8A3DE4D50AFE13
E96E61770EB4A156BCC8ADD4C6977DFF1C9D339E0F3829CA38BC9AF3A68B5677
BFD5EB2C6DF873174345CA0D5C73AF01A04CE163B4EE74324767C861D712909E
6183CE067084538F2540DA99CFB9F444FF1A180A39627ABFF3B24739AFC02D8B
3C3FA8700F233D71D4D96C073E3B2AE05419CC8EDF280C47303F2420BB1A0561
A3F8024F1EA217EA6DE943D5AD5F54D48C79FDCD1A9D7D899BC230ECE5618BE3
447A886049B77C529B98680AE79EF29C9C45225A1C2EB10EB119E04078A554E4
596183111D0E8E139C341D55C81FB404B2C0C64CC36A6BA84E0309731A6C5AC0
B91C18BCD137DBA5442EAD2E0A978B9A1E2D301EAB9C5C807EAE2328A894AB58
15EAF8A77E0B33584825F38502D313F72FCD09B4F17FF2B81010F18319ED31C8
25F808155BE4E086BD7CC1836C2D9DDC9DDAE60A9C0BD80400ADB0BE43D79DAB
CDE808319AE51CE18FCAA5B0CBB0588057219A76FEF9D79C309F7E8B53940B4A
3950EF397B31A85DF5C9BE1F7508C13E9DD4F9C0F6131A9CFBB4483BC913183B
2BE2ADBC12FD65FF72DDAB0148B6F81C370D0B4A133B6E0DE5769D8C963BB907
DAAC6C89A476C0AC21CE55ED7CC44EA8DB8CF11B039C70076D2ADC7897E3F217
9C9141B6A1280FD88C37CC8F9A757C79B16077EE8895F7DEF040E94994B6F2F9
AD22DE3A3BEC2E261B03418FE3AC1A5363F3930C1ECAAEC294AA48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 1000 1000 (forzac.dvi)
@start /Fa 253[129 2[{}1 166.044 /CMSY10 rf /Fb 131[163
1[72 86 86 117 86 90 63 64 63 1[90 81 90 135 45 86 1[45
90 81 50 72 90 72 90 81 9[167 2[117 1[120 1[111 126 2[102
3[122 1[106 111 2[115 7[45 2[81 4[81 81 2[45 1[45 2[63
63 40[{}43 166.044 /CMR12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 1000dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 228 150 a Fb(Rules)51 b(of)f(Hex:)70
b(There)52 b(are)f(t)-5 b(w)g(o)52 b(pla)-5 b(y)g(ers.)73
b(The)51 b(b)5 b(oard)52 b(is)e(an)h(arra)-5 b(y)51 b(of)f(hexagons)i
(|)e(some)h(n)-5 b(um)g(b)5 b(er)-16 351 y(of)48 b(ro)-5
b(ws)50 b(and)f(some)g(n)-5 b(um)g(b)5 b(er)50 b(of)e(columns)i(|)e(in)
g(the)h(shap)5 b(e)49 b(of)e(a)i(parallelogram.)74 b(Tw)-5
b(o)49 b(opp)5 b(osing)50 b(sides)-16 552 y(are)55 b(blac)-5
b(k.)74 b(Tw)-5 b(o)56 b(opp)5 b(osing)56 b(sides)f(are)g(white.)228
752 y(One)63 b(pla)-5 b(y)g(er)64 b(gets)f(the)g(blac)-5
b(k)63 b(sides)h(and)f(a)f(set)h(of)f(blac)-5 b(k)63
b(stones)g(or)g(a)f(blac)-5 b(k)64 b(mark)-5 b(er.)97
b(The)63 b(other)-16 953 y(pla)-5 b(y)g(er)67 b(gets)e(the)h(white)g
(sides)f(and)h(a)f(set)g(of)f(white)i(stones)g(or)f(a)g(white)h(mark)-5
b(er.)105 b(Pla)-5 b(y)g(ers)66 b(alternate)-16 1153
y(turns.)105 b(On)65 b(a)g(turn,)j(a)d(pla)-5 b(y)g(er)67
b(puts)e(a)g(stone)h(|)e(or)h(marks)h(|)e(an)h(empt)-5
b(y)66 b(cell.)104 b(The)66 b(winner)g(is)f(the)-16 1354
y(pla)-5 b(y)g(er)56 b(who)g(connects)g(their)f(t)-5
b(w)g(o)56 b(sides)g(with)f(a)f(path)i(|)e(whic)-5 b(h)56
b(can)f(t)-5 b(wist)56 b(and)f(turn.)556 3122 y @beginspecial
0 @llx 0 @lly 113 @urx 74 @ury 1695 @rwi @setspecial
%%BeginDocument: pix/7x7-empty.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 113 74
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 63 def
%---------------- Variables -------------------

/DimX 7 def
/DimY 7 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/GraphVertexSize 1.0 Scale mul def
/GraphLineWidth 0.5 Scale mul def
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HexLine { % a b c d
    /d exch def
    /c exch def
    /b exch def
    /a exch def
    newpath
    a b HexCenterPoint moveto
    c d HexCenterPoint lineto
    stroke
} def

/HexCurve { % a b c d e f
    /f exch def
    /e exch def
    /d exch def
    /c exch def
    /b exch def
    /a exch def
    newpath
    a b HexCenterPoint moveto
    c d HexCenterPoint e f HexCenterPoint HexRadius 2 mul arcto
    e f HexCenterPoint lineto
    stroke
} def

/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexPLBoard { 6 dict begin %point-line board
    gsave
    BoardShade setgray newpath
    -1 DimY 1 add 0.5 mul HexCenterPoint moveto
    1 DimY HexCenterPoint lineto
    DimX 1 add 0.5 mul DimY 2 add HexCenterPoint lineto
    DimX DimY HexCenterPoint lineto
    DimX 2 add DimY 1 add 0.5 mul HexCenterPoint lineto
    DimX 1 HexCenterPoint lineto
    DimX 1 add 0.5 mul -1 HexCenterPoint lineto
    1 1 HexCenterPoint lineto
    closepath fill 0 setgray
    1 DimY HexCenterPoint moveto
    1 1 DimX { /i exch def 
        i 1 i DimY HexLine 
        DimY 1 add 0.5 mul -1 i 1 HexLine
        DimY 1 add 0.5 mul DimY 2 add i DimY HexLine } for
    1 1 DimY { /j exch def 
        1 j DimX j HexLine 
        -1 DimX 1 add 0.5 mul 1 j HexLine
        DimX 2 add DimX 1 add 0.5 mul DimX j HexLine } for
    /topx 1 def /topy 1 def /btmx 1 def /btmy 1 def
    DimX DimY add 3 sub {
      topx DimX lt {/topx 1 topx add def}{/topy 1 topy add def} ifelse 
      btmy DimY lt {/btmy 1 btmy add def}{/btmx 1 btmx add def} ifelse 
      topx topy btmx btmy HexLine
      } repeat
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j HexVertex
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        %DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	%i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/HexVertex { 2 dict begin /j exch def /i exch def
    i j GraphVertexSize HexDot
end } def

/HexLine { 4 dict begin /j2 exch def /i2 exch def /j1 exch def /i1 exch def
    GraphLineWidth setlinewidth
    0 setgray
    newpath
    i1 j1 HexCenterPoint moveto
    i2 j2 HexCenterPoint lineto
    stroke
end } def

%%---------------- Program -------------------


FlatTopBoard
DrawHexBoard
1 HexBoardBorders


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 2980 w @beginspecial 0 @llx 0 @lly 113 @urx
74 @ury 1695 @rwi @setspecial
%%BeginDocument: pix/7x7-f1b6.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 113 74
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 63 def
%---------------- Variables -------------------

/DimX 7 def
/DimY 7 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/GraphVertexSize 1.0 Scale mul def
/GraphLineWidth 0.5 Scale mul def
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HexLine { % a b c d
    /d exch def
    /c exch def
    /b exch def
    /a exch def
    newpath
    a b HexCenterPoint moveto
    c d HexCenterPoint lineto
    stroke
} def

/HexCurve { % a b c d e f
    /f exch def
    /e exch def
    /d exch def
    /c exch def
    /b exch def
    /a exch def
    newpath
    a b HexCenterPoint moveto
    c d HexCenterPoint e f HexCenterPoint HexRadius 2 mul arcto
    e f HexCenterPoint lineto
    stroke
} def

/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexPLBoard { 6 dict begin %point-line board
    gsave
    BoardShade setgray newpath
    -1 DimY 1 add 0.5 mul HexCenterPoint moveto
    1 DimY HexCenterPoint lineto
    DimX 1 add 0.5 mul DimY 2 add HexCenterPoint lineto
    DimX DimY HexCenterPoint lineto
    DimX 2 add DimY 1 add 0.5 mul HexCenterPoint lineto
    DimX 1 HexCenterPoint lineto
    DimX 1 add 0.5 mul -1 HexCenterPoint lineto
    1 1 HexCenterPoint lineto
    closepath fill 0 setgray
    1 DimY HexCenterPoint moveto
    1 1 DimX { /i exch def 
        i 1 i DimY HexLine 
        DimY 1 add 0.5 mul -1 i 1 HexLine
        DimY 1 add 0.5 mul DimY 2 add i DimY HexLine } for
    1 1 DimY { /j exch def 
        1 j DimX j HexLine 
        -1 DimX 1 add 0.5 mul 1 j HexLine
        DimX 2 add DimX 1 add 0.5 mul DimX j HexLine } for
    /topx 1 def /topy 1 def /btmx 1 def /btmy 1 def
    DimX DimY add 3 sub {
      topx DimX lt {/topx 1 topx add def}{/topy 1 topy add def} ifelse 
      btmy DimY lt {/btmy 1 btmy add def}{/btmx 1 btmx add def} ifelse 
      topx topy btmx btmy HexLine
      } repeat
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j HexVertex
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        %DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	%i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/HexVertex { 2 dict begin /j exch def /i exch def
    i j GraphVertexSize HexDot
end } def

/HexLine { 4 dict begin /j2 exch def /i2 exch def /j1 exch def /i1 exch def
    GraphLineWidth setlinewidth
    0 setgray
    newpath
    i1 j1 HexCenterPoint moveto
    i2 j2 HexCenterPoint lineto
    stroke
end } def

%%---------------- Program -------------------


% transpose: f1 b6 c5 e5 f5 f2 e3 e4 f3 d3

FlatTopBoard
DrawHexBoard
1 HexBoardBorders

6 1 HexWhitePiece
2 6 HexBlackPiece
3 5 HexWhitePiece
5 5 HexBlackPiece
6 5 HexWhitePiece
6 2 HexBlackPiece
5 3 HexWhitePiece
5 4 HexBlackPiece
6 3 HexWhitePiece
4 3 HexBlackPiece
5 2 HexWhitePiece
6 4 HexBlackPiece
4 6 HexWhitePiece
4 4 HexBlackPiece
2 4 HexWhitePiece
3 2 HexBlackPiece
1 3 HexWhitePiece
2 1 HexBlackPiece
1 2 HexWhitePiece
1 1 HexBlackPiece
3 1 HexWhitePiece
2 2 HexBlackPiece
4 2 HexWhitePiece
3 3 HexBlackPiece
7 4 HexWhitePiece
7 3 HexBlackPiece


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 825 3461 a(Figure)h(1:)73 b(Left:)f(Empt)-5
b(y)55 b(7)p Fa(\002)p Fb(7)g(b)5 b(oard.)73 b(Righ)-5
b(t:)74 b(End)54 b(of)g(game,)i(Blac)-5 b(k)55 b(wins.)2798
4514 y @beginspecial 0 @llx 0 @lly 51 @urx 38 @ury 612
@rwi @setspecial
%%BeginDocument: pix/swap0.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 51 38
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 27 def
%---------------- Variables -------------------

/DimX 3 def
/DimY 3 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/GraphVertexSize 1.0 Scale mul def
/GraphLineWidth 0.5 Scale mul def
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HexLine { % a b c d
    /d exch def
    /c exch def
    /b exch def
    /a exch def
    newpath
    a b HexCenterPoint moveto
    c d HexCenterPoint lineto
    stroke
} def

/HexCurve { % a b c d e f
    /f exch def
    /e exch def
    /d exch def
    /c exch def
    /b exch def
    /a exch def
    newpath
    a b HexCenterPoint moveto
    c d HexCenterPoint e f HexCenterPoint HexRadius 2 mul arcto
    e f HexCenterPoint lineto
    stroke
} def

/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexPLBoard { 6 dict begin %point-line board
    gsave
    BoardShade setgray newpath
    -1 DimY 1 add 0.5 mul HexCenterPoint moveto
    1 DimY HexCenterPoint lineto
    DimX 1 add 0.5 mul DimY 2 add HexCenterPoint lineto
    DimX DimY HexCenterPoint lineto
    DimX 2 add DimY 1 add 0.5 mul HexCenterPoint lineto
    DimX 1 HexCenterPoint lineto
    DimX 1 add 0.5 mul -1 HexCenterPoint lineto
    1 1 HexCenterPoint lineto
    closepath fill 0 setgray
    1 DimY HexCenterPoint moveto
    1 1 DimX { /i exch def 
        i 1 i DimY HexLine 
        DimY 1 add 0.5 mul -1 i 1 HexLine
        DimY 1 add 0.5 mul DimY 2 add i DimY HexLine } for
    1 1 DimY { /j exch def 
        1 j DimX j HexLine 
        -1 DimX 1 add 0.5 mul 1 j HexLine
        DimX 2 add DimX 1 add 0.5 mul DimX j HexLine } for
    /topx 1 def /topy 1 def /btmx 1 def /btmy 1 def
    DimX DimY add 3 sub {
      topx DimX lt {/topx 1 topx add def}{/topy 1 topy add def} ifelse 
      btmy DimY lt {/btmy 1 btmy add def}{/btmx 1 btmx add def} ifelse 
      topx topy btmx btmy HexLine
      } repeat
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j HexVertex
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        %DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	%i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/HexVertex { 2 dict begin /j exch def /i exch def
    i j GraphVertexSize HexDot
end } def

/HexLine { 4 dict begin /j2 exch def /i2 exch def /j1 exch def /i1 exch def
    GraphLineWidth setlinewidth
    0 setgray
    newpath
    i1 j1 HexCenterPoint moveto
    i2 j2 HexCenterPoint lineto
    stroke
end } def

%%---------------- Program -------------------


FlatTopBoard
DrawHexBoard
1 HexBoardBorders
1 3 HexBlackPiece


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial -16 4853 a(Figure)k(2:)80 b(White)58 b(to)h(pla)-5
b(y)-14 b(.)84 b(Find)58 b(the)h(b)5 b(est)58 b(mo)-5
b(v)g(e)59 b(\(either)g(it)f(wins,)i(or)e(if)g(it)g(loses,)h(it)f
(maximizes)i(the)-16 5053 y(n)-5 b(um)g(b)5 b(er)57 b(of)d(stones)i
(that)f(Blac)-5 b(k)55 b(pla)-5 b(ys)56 b(b)5 b(efore)54
b(winning\).)1638 6086 y @beginspecial 0 @llx 0 @lly
51 @urx 38 @ury 612 @rwi @setspecial
%%BeginDocument: pix/3x3.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 51 38
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 27 def
%---------------- Variables -------------------

/DimX 3 def
/DimY 3 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/GraphVertexSize 1.0 Scale mul def
/GraphLineWidth 0.5 Scale mul def
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HexLine { % a b c d
    /d exch def
    /c exch def
    /b exch def
    /a exch def
    newpath
    a b HexCenterPoint moveto
    c d HexCenterPoint lineto
    stroke
} def

/HexCurve { % a b c d e f
    /f exch def
    /e exch def
    /d exch def
    /c exch def
    /b exch def
    /a exch def
    newpath
    a b HexCenterPoint moveto
    c d HexCenterPoint e f HexCenterPoint HexRadius 2 mul arcto
    e f HexCenterPoint lineto
    stroke
} def

/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexPLBoard { 6 dict begin %point-line board
    gsave
    BoardShade setgray newpath
    -1 DimY 1 add 0.5 mul HexCenterPoint moveto
    1 DimY HexCenterPoint lineto
    DimX 1 add 0.5 mul DimY 2 add HexCenterPoint lineto
    DimX DimY HexCenterPoint lineto
    DimX 2 add DimY 1 add 0.5 mul HexCenterPoint lineto
    DimX 1 HexCenterPoint lineto
    DimX 1 add 0.5 mul -1 HexCenterPoint lineto
    1 1 HexCenterPoint lineto
    closepath fill 0 setgray
    1 DimY HexCenterPoint moveto
    1 1 DimX { /i exch def 
        i 1 i DimY HexLine 
        DimY 1 add 0.5 mul -1 i 1 HexLine
        DimY 1 add 0.5 mul DimY 2 add i DimY HexLine } for
    1 1 DimY { /j exch def 
        1 j DimX j HexLine 
        -1 DimX 1 add 0.5 mul 1 j HexLine
        DimX 2 add DimX 1 add 0.5 mul DimX j HexLine } for
    /topx 1 def /topy 1 def /btmx 1 def /btmy 1 def
    DimX DimY add 3 sub {
      topx DimX lt {/topx 1 topx add def}{/topy 1 topy add def} ifelse 
      btmy DimY lt {/btmy 1 btmy add def}{/btmx 1 btmx add def} ifelse 
      topx topy btmx btmy HexLine
      } repeat
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j HexVertex
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        %DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	%i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/HexVertex { 2 dict begin /j exch def /i exch def
    i j GraphVertexSize HexDot
end } def

/HexLine { 4 dict begin /j2 exch def /i2 exch def /j1 exch def /i1 exch def
    GraphLineWidth setlinewidth
    0 setgray
    newpath
    i1 j1 HexCenterPoint moveto
    i2 j2 HexCenterPoint lineto
    stroke
end } def

%%---------------- Program -------------------


FlatTopBoard
DrawHexBoard
1 HexBoardBorders


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial 2314 w @beginspecial 0 @llx 0 @lly 66 @urx
47 @ury 792 @rwi @setspecial
%%BeginDocument: pix/4x4.eps
%!PS-Adobe-3.0
%%Creator: Jack van Rijswijck, thanks to Cameron Browne
%%BoundingBox: 0 0 66 47
%%Pages: 0
%%EndComments

/OriginX -6 def
/OriginY 36 def
%---------------- Variables -------------------

/DimX 4 def
/DimY 4 def
/Scale 1.2 def


% draw  Hex boards, any size ... but labels only up to 26x26
% based on code by Cameron Browne, revised by Jack vR, revised by RBH
%-------------- state initializations -------------------------
1 setlinejoin   % lines meet at a point  ==>    use round join
%---------------- constants -------------------
/Root3Div2  0.86602540378444 def
/Chars   {[(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)
           (n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)]} def
/CharsUC {[(A)(B)(C)(D)(E)(F)(G)(H)(I)(J)(K)(L)(M)
           (N)(O)(P)(Q)(R)(S)(T)(U)(V)(W)(X)(Y)(Z)]} def
/Digits  {[(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)
           (14)(15)(16)(17)(18)(19)(20)(21)(22)(23)(24)(25)(26)]} def
/HexRadius      5 Scale mul def % hexagon center-to-corner distance 
/HexLineWidth 0.1 Scale mul def 
/GraphVertexSize 1.0 Scale mul def
/GraphLineWidth 0.5 Scale mul def
/CircleRadius 3.0 Scale mul def 
/CircleLineWidth 0.346 Scale mul def 
/PerimeterWidth 0.5 Scale mul def 
/TextHeight 4.5 def
/TextWidth TextHeight 0.45 mul def 
/BoardShade 0.8 def
/CoordinatesShade 0.5 def
/MarkerSize 1.2 def
/CellOrientation 1 def   % 1: flat bottom  0: pointed bottom
/CellCorner [ % 6 cell corners, wrt center 0 0, plus "up" and "down"
   [ HexRadius  neg       0                           ] 
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul neg ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul neg ]
   [ HexRadius            0                           ]
   [ HexRadius 2 div      HexRadius Root3Div2 mul     ]
   [ HexRadius 2 div neg  HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul     ]
   [ 0                    HexRadius Root3Div2 mul neg ]
] def
%----- name cell corner indices ... see below
/Left  0 def /DownLeft 1 def /DownRight 2 def 
/Right 3 def /UpRight  4 def /UpLeft    5 def 
/Up    6 def /Down     7 def
%-----------------------------------------------------
% cell orientations:  flat bottom    flat side
%-----------------------------------------------------
% flat bottom 
% board cell indices            cell corner/top/bottom indices
%             --
%           /    \
%        --   1,3  --                  5 -6- 4
%      /    \    /    \               /       \
%   --   1,2  --   2,3  --           0         3
% /    \    /    \    /    \          \       /
%   1,1  --   2,2  --   3,3            1 -7- 2
% \    /    \    /    \    /
%   --   2,1  --   3,2  --
%      \    /    \    /   
%        --   3,1  --     
%----------------------------------------------------
% flat side 
%    /  \  /  \  /  \                       5
%   | 11 || 12 || 13 ||                   /   6
%    \  /  \  /  \  /  \                 0     4
%     || 21 || 22 || 23 |                |     |
%       \  /  \  /  \  /  \              1     3
%        || 31 || 32 || 33 |              7   /
%-------------------------------------------2--------
%----------- procedures -------------
/ScalePoint { % stack: ... x y size ==> ...  x*size y*size
   3 dict begin /size exch def /y exch def /x exch def
   x size mul           y size mul
end } def

/FlatTopBoard { FlatSideCells } def

/FlatSideCells {  % redefine cell orientation for flat side
  /CellOrientation 0 def   
  /CellCorner [ % 6 cell corners, wrt center 0 0  %xcoord ycoord
    [HexRadius Root3Div2 mul neg  HexRadius 2 div     ]
    [HexRadius Root3Div2 mul neg  HexRadius 2 div neg ]
    [0                            HexRadius neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div neg ]
    [HexRadius Root3Div2 mul      HexRadius 2 div ]
    [0                            HexRadius ]
    [HexRadius Root3Div2 2 div mul HexRadius 0.75 mul ]
    [HexRadius Root3Div2 2 div mul neg HexRadius 0.75 mul neg ]
  ] def
} def

/HexCenterPoint { % center of cell (i,j)
    2 dict begin /j exch def /i exch def
    CellOrientation 1 eq {
    OriginX i j add HexRadius mul 1.5 mul add %Ox + (i+j)*HR*1.5
    OriginY i j sub HexRadius mul Root3Div2 mul sub %Oy - (i-j)*HR*R3/2
    }{
    OriginX i 2 j mul add HexRadius mul Root3Div2 mul add  %Ox + (2i+j)*HR
    OriginY i 1 sub HexRadius mul 1.5 mul sub %Oy - i*HR*R3/2
    } ifelse
end } def
 
/HexLine { % a b c d
    /d exch def
    /c exch def
    /b exch def
    /a exch def
    newpath
    a b HexCenterPoint moveto
    c d HexCenterPoint lineto
    stroke
} def

/HexCurve { % a b c d e f
    /f exch def
    /e exch def
    /d exch def
    /c exch def
    /b exch def
    /a exch def
    newpath
    a b HexCenterPoint moveto
    c d HexCenterPoint e f HexCenterPoint HexRadius 2 mul arcto
    e f HexCenterPoint lineto
    stroke
} def

/HxgnCorner { 5 dict begin /corn exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    x CellCorner corn get 0 get add
    y CellCorner corn get 1 get add
end } def

/Go { 2 dict begin /corn exch def /mag exch def
   % rlineto in a cell orientation direction
   CellCorner corn get aload pop mag ScalePoint rlineto
end } def

/TurnGo { rotate 1.0 Left Go } def % call: degrees TurnGo
/MagTurnGo { rotate Left Go } def % call: mag degrees TurnGo

/HexagonPath { % call: i j HexagonPath
    newpath 
    UpRight HxgnCorner moveto 
    6 { 1.0 Left Go 60 rotate } repeat 
} def

/FillAndStroke { 2 dict begin /sh exch def /wdth exch def
    gsave sh setgray fill
    grestore 0 setgray wdth setlinewidth stroke
end } def

/ShadedHexagon { 3 dict begin /shade exch def /j exch def /i exch def
    i j HexagonPath
    0 shade FillAndStroke
end } def

/Hexagon { % stack: ... i j
    HexagonPath 
    HexLineWidth BoardShade FillAndStroke
} def

/SemiHexagonPath { % stack: ... top i j
    newpath 
    1 eq { Left HxgnCorner moveto 
        1.0 UpRight Go 1.0 Right Go 1.0 DownRight Go stroke }{
        Right HxgnCorner moveto 
        1.0 DownLeft Go 1.0 Left Go 1.0 UpLeft Go stroke
    } ifelse
} def

/HexBoardPerimeter {
    newpath
    1 DimY UpRight HxgnCorner moveto 1.0 Left Go                      
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 
    DimY 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo 60 TurnGo
    DimX 1 sub { 60 TurnGo 300 TurnGo } repeat 60 rotate %restore rotation
} def

%----------- Havannah coordinates ----------------------
%                   ..  ..  ..
%                 d1  c2  b3  a4
%                   c1  b2  a3
%                     b1  a2
%                       a1
/HavannahPosn { % convert to usual coordinate, so ... x y  =>  ... 1+DimX-x  y
    exch DimX 1 add exch sub exch 
} def

/HavannahBoardPerimeter {
    newpath
    1 DimX UpRight HxgnCorner moveto 1.0 Left Go                      
    6 {Base 1 sub { 60 TurnGo 300 TurnGo } repeat 60 TurnGo } repeat
} def

/DrawHexBoard { 2 dict begin
    gsave
    HexBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexPLBoard { 6 dict begin %point-line board
    gsave
    BoardShade setgray newpath
    -1 DimY 1 add 0.5 mul HexCenterPoint moveto
    1 DimY HexCenterPoint lineto
    DimX 1 add 0.5 mul DimY 2 add HexCenterPoint lineto
    DimX DimY HexCenterPoint lineto
    DimX 2 add DimY 1 add 0.5 mul HexCenterPoint lineto
    DimX 1 HexCenterPoint lineto
    DimX 1 add 0.5 mul -1 HexCenterPoint lineto
    1 1 HexCenterPoint lineto
    closepath fill 0 setgray
    1 DimY HexCenterPoint moveto
    1 1 DimX { /i exch def 
        i 1 i DimY HexLine 
        DimY 1 add 0.5 mul -1 i 1 HexLine
        DimY 1 add 0.5 mul DimY 2 add i DimY HexLine } for
    1 1 DimY { /j exch def 
        1 j DimX j HexLine 
        -1 DimX 1 add 0.5 mul 1 j HexLine
        DimX 2 add DimX 1 add 0.5 mul DimX j HexLine } for
    /topx 1 def /topy 1 def /btmx 1 def /btmy 1 def
    DimX DimY add 3 sub {
      topx DimX lt {/topx 1 topx add def}{/topy 1 topy add def} ifelse 
      btmy DimY lt {/btmy 1 btmy add def}{/btmx 1 btmx add def} ifelse 
      topx topy btmx btmy HexLine
      } repeat
    1 1 DimY { /j exch def
	1 1 DimX { /i exch def
	   i j HexVertex
	} for } for
    grestore
end } def

/DrawHavannahBoard { 3 dict begin
    /Base DimX 1 add 2 idiv  def
    gsave
    HavannahBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 Base { /j exch def
	Base j 1 sub sub 1 DimX { /i exch def
	   i j 1 SemiHexagonPath stroke
	} for } for
    1 1 Base 1 sub { /j exch def
	1 1 DimX j sub { /i exch def
	   i j Base add 1 SemiHexagonPath stroke
	} for } for
    grestore
end } def

/DrawHexBorder{ 6 dict begin /start exch def 
    /cells exch def /isBlack exch def /which exch def
    gsave
    which UpLeft eq {1 DimY 1 add start sub Up HxgnCorner moveto /d Left def /r 60 def} if
    which UpRight eq {start DimY Up HxgnCorner moveto /d Right def /r 300 def} if
    which DownLeft eq {DimX 1 add start sub 1 Down HxgnCorner moveto /d Left def /r 300 def} if
    which DownRight eq {DimX start Down HxgnCorner moveto /d Right def /r 60 def} if
    0.5 d Go 
    which UpRight eq which DownRight eq or {180 rotate} if
    r TurnGo 
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.5 360 r sub MagTurnGo 1.5 360 r sub 2 mul MagTurnGo
    cells 1 sub {360 r sub TurnGo r TurnGo} repeat
    0.75 360 r sub MagTurnGo
    closepath isBlack 1 eq {gsave fill grestore} if stroke grestore
end } def

/NoDrawHexBoard {  % dummy, used in creating bounding box
} def

/HexBoardBorders { 1 dict begin
    /upperLeftBlack exch def
    PerimeterWidth setlinewidth 0 setgray
    UpLeft    upperLeftBlack       DimY 1 DrawHexBorder
    UpRight   1 upperLeftBlack sub DimX 1 DrawHexBorder
    DownRight upperLeftBlack       DimY 1 DrawHexBorder
    DownLeft  1 upperLeftBlack sub DimX 1 DrawHexBorder
end } def

/YBoardPerimeter {
    newpath 1 1 DownRight HxgnCorner moveto 180 rotate
    3 { DimX 1 sub { 300 TurnGo 60 TurnGo } repeat 
        60 TurnGo 60 TurnGo} 
    repeat % now restore initial rotation state
    180 rotate % closepath
} def

/DrawYBoard { 2 dict begin
    YBoardPerimeter 
    PerimeterWidth BoardShade FillAndStroke
    HexLineWidth setlinewidth
    1 1 DimX {/j exch def
        1 1 DimX 1 add j sub {/i exch def
	    i j 1 SemiHexagonPath stroke
        } for } for
end } def

/FontSelect { % bold italic FontSelect
    2 dict begin /italic exch def /bold exch def
    bold {
	italic 
	{ /Times-BoldItalic findfont TextHeight scalefont setfont } 
	{ /Times-Bold findfont TextHeight scalefont setfont }
	ifelse} 
        {
	italic {/Times-Italic findfont TextHeight scalefont setfont} 
	{ /Times findfont TextHeight scalefont setfont }
	ifelse}
    ifelse
end } def
	    
/LabelString {   % call: i j (str) strlen LabelString
%  to use with board rotation, remove comments
    6 dict begin /strlen exch def /str exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint /y exch def /x exch def
    %BoardRotation rotate
    x y moveto 
    %360 BoardRotation sub rotate
    TextWidth strlen mul 0.5 mul neg TextHeight 0.33 mul neg rmoveto
    str show 
end } def

/AbsLabelString { 4 dict begin
    /strlen exch def /str exch def /y exch def /x exch def
    newpath
    x AbsCoordX TextWidth strlen mul 0.5 mul sub
    y AbsCoordY TextHeight 0.33 mul sub
    moveto
    str
    show
end } def

/LabelStringVerb { % i j (str) strlen shade bold italic LabelStringVerb
    7 dict begin /italic exch def /bold exch def /shade exch def
    /strlen exch def /str exch def /j exch def /i exch def
    bold italic FontSelect shade setgray
    i j str strlen LabelString
end } def

/HexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimX { /i exch def
	i 0          Chars i 1 sub get 1 LabelString
	i DimY 1 add Chars i 1 sub get 1 LabelString
    } for
    1 1 DimY { /j exch def
	0 j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
	DimX 1 add j Digits j 1 sub get DimY 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HavannahBoardCoordinates { 3 dict begin
    false true FontSelect CoordinatesShade setgray
    /Base DimX 1 add 2 idiv  def
    1 1 Base { /i exch def
	i 0 HavannahPosn Chars  i 1 sub get 1 LabelString
	0 i HavannahPosn Digits i 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
    1 1 Base 1 sub { /i exch def
	i Base add i HavannahPosn Chars  i Base add 1 sub get 1 LabelString
	i i Base add HavannahPosn Digits i Base add 1 sub get 
	    DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/AltHexBoardCoordinates { 2 dict begin
    false true FontSelect CoordinatesShade setgray
    1 1 DimY { /j exch def
	0 j Chars j 1 sub get 1 LabelString
        %DimX 1 add j Chars j 1 sub get 1 LabelString
    } for
    1 1 DimX { /i exch def
	i 0 Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
	%i DimY 1 add Digits i 1 sub get DimX 9 gt {2} {1} ifelse LabelString
    } for
end } def

/HexDot { 3 dict begin /size exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint size 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexWhiteMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexWhitePiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray 0 setlinewidth fill
end } def

/HexBlackMarkedPiece { 2 dict begin /j exch def /i exch def 
    i j HexBlackPiece 
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    1 setgray 0 setlinewidth fill
end } def

/HexDoubleMarker { 6 dict begin
    /shaderight exch def /shadeleft exch def /j exch def /i exch def
    i j HexCenterPoint /y exch def /x exch def
    gsave
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    shadeleft setgray 0 setlinewidth fill
    newpath
    x MarkerSize sub y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    shaderight setgray 0 setlinewidth fill
    newpath
    x MarkerSize add y MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke
    grestore
end } def

/HexBlackWhiteMarker { 0.0 1.0 HexDoubleMarker } def

/HexWhiteBlackMarker { 1.0 0.0 HexDoubleMarker } def
        
/HexMarker { 2 dict begin /j exch def /i exch def
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setlinewidth fill
    newpath
    i j HexCenterPoint MarkerSize 0 360 arc
    0 setgray CircleLineWidth setlinewidth stroke  
end } def

/HexBlackMarker { 2 dict begin /j exch def /i exch def
    0 setgray
    i j HexMarker
end } def

/HexWhiteMarker { 2 dict begin /j exch def /i exch def
    1 setgray
    i j HexMarker
end } def
    
/HexPiece { 3 dict begin /shade exch def /j exch def /i exch def
    newpath
    i j HexCenterPoint CircleRadius 0 360 arc
    CircleLineWidth shade FillAndStroke
end } def

/HexWhitePiece { 1.0 HexPiece } def

/HexBlackPiece { 0.0 HexPiece } def

/HexWhiteLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def
    i j HexWhitePiece
    i j str strlen 0.0 true true LabelStringVerb
end } def

/HexBlackLabelledPiece { % i j (str) strlen
    4 dict begin /strlen exch def /str exch def /j exch def /i exch def 
    i j HexBlackPiece
    i j str strlen 1.0 true true LabelStringVerb
end } def

/AbsCoordX { 1 dict begin /x exch def
    OriginX x Scale mul add
end } def

/AbsCoordY { 1 dict begin /y exch def
    OriginY y Scale mul add
end } def

/DrawBox { /maxy exch def /maxx exch def /miny exch def /minx exch def
    newpath
    minx miny moveto
    maxx minx sub 0 rlineto
    0 maxy miny sub rlineto
    minx maxx sub 0 rlineto
    0 miny maxy sub rlineto
    HexLineWidth setlinewidth
    0 setgray
    stroke
} def

/HexVertex { 2 dict begin /j exch def /i exch def
    i j GraphVertexSize HexDot
end } def

/HexLine { 4 dict begin /j2 exch def /i2 exch def /j1 exch def /i1 exch def
    GraphLineWidth setlinewidth
    0 setgray
    newpath
    i1 j1 HexCenterPoint moveto
    i2 j2 HexCenterPoint lineto
    stroke
end } def

%%---------------- Program -------------------


FlatTopBoard
DrawHexBoard
1 HexBoardBorders


%------------ Trailer --------------

showpage

%%EndDocument
 @endspecial eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
